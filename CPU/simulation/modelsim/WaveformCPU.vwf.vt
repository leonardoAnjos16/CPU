// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/28/2019 20:07:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire Talu;
wire [1:0] Tx;
wire [1:0] Ty;
wire [1:0] Tz;
wire [2:0] counter;
wire [3:0] outALU;
wire [3:0] valueMemory;
wire [3:0] valueX;
wire [3:0] valueY;
wire [3:0] valueZ;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.Talu(Talu),
	.Tx(Tx),
	.Ty(Ty),
	.Tz(Tz),
	.clock(clock),
	.counter(counter),
	.outALU(outALU),
	.valueMemory(valueMemory),
	.valueX(valueX),
	.valueY(valueY),
	.valueZ(valueZ)
);
initial 
begin 
#1000000 $stop;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #1000 1'b1;
	#1000;
end 
endmodule

